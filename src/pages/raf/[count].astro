---
import { timeAgo } from "@guardian/libs";
import Header from "../../components/Header.astro";

export { getStaticPaths } from "../../lib/counts";

const { count } = Astro.params;

const now = Date.now();
---

<Header />

<h1>{count} elements with RAF</h1>
<ul>
  {
    Array.from({ length: Number(count) }, (_, i) => now - 1000 * (i + 1)).map(
      (then) => (
        <li>
          <time
            data-relative-format="med"
            datetime={new Date(then).toISOString()}
          >
            {timeAgo(then)}
          </time>
        </li>
      )
    )
  }
</ul>

<script>
  import { timeAgo } from "@guardian/libs";

  const times = [
    ...document.querySelectorAll<HTMLTimeElement>("time[data-relative-format]"),
  ];

  const updateElements = () => {
    for (const time of times) {
      requestAnimationFrame(() => {
        const { relativeFormat } = time.dataset;
        const absoluteTime = time.dateTime;
        if (!absoluteTime || !relativeFormat) return;

        const newTime = timeAgo(new Date(absoluteTime).getTime(), {
          verbose: false,
        });

        const oldTime = time.innerText;
        if (newTime !== false && newTime !== oldTime) time.innerText = newTime;
      });
    }
  };

  updateElements();
  setInterval(updateElements, 5_000);

  // new MutationObserver((records, observer) => {
  //   console.log({ records, observer });
  // });
</script>

<style>
  ul {
    display: grid;
    grid-template-columns: repeat(10, 1fr);
    grid-auto-rows: 100px;
    list-style-type: none;
    gap: 1rem;
    padding: 0;
  }

  li {
    background-color: #eee;
    overflow: hidden;
  }
</style>
